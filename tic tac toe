import random

PLAYER_X='X'
PLAYER_O='O'
EMPTY=' '

class TicTacToe:
    def __init__(self):
        self.board = [[EMPTY for _ in range(3)] for _ in range(3)]
        self.current_player = PLAYER_X
        
    def print_board(self):
        for row in self.board:
            print('|'.join(row))
            print('-' * 5)
            
    def is_winner(self,player):
        for row in self.board:
            if all(s == player for s in row):
                return True 
        for col in range(3):
            if all(self.board[row][col] == player for row in range(3)):
                return True 
        if all(self.board[i][i] == player for i in range(3)) or all(self.board[i][2-i] == player for i in range(3)):
               return True 
        return False
    
    def is_full(self):
        return all(cell != EMPTY for row in self.board for cell in row)
    
    def get_available_moves(self):
        return [(r,c) for r in range(3) for c in range(3) if self.board[r][c] == EMPTY]
    
    def make_move(self, row, col, player):
        if self.board[row][col] == EMPTY:
            self.board[row][col] == player
            return True 
        return False
    
    def minimax(self, depth, is_maximizing):
        if self.is_winner(PLAYER_O):
            return 1
        if self.is_winner(PLAYER_X):
            return -1
        if self.is_full():
            return 0
        
        if is_maximizing:
            best_score = float('-inf')
            for (r,c) in self.get_available_moves():
                self.board[r][c] = PLAYER_O
                score = self.minimax(depth +1, False)
                self.board[r][c] = EMPTY
                best_score = max(score, best_score)
            return best_score
        
        else:
            best_score = float('inf')
            for(r, c) in self.get_available_moves():
                self.board[r][c] == PLAYER_O
                score = self.minimax(depth + 1, True)
                self.board[r][c] = EMPTY
                best_score = min(score, best_score)
            return best_score
    
    def best_move(self):
        best_score = float('-inf')
        move = None
        for (r,c) in self.get_available_moves():
            self.board[r][c] = PLAYER_O
            score = self.minimax(0, False)
            self.board[r][c] = EMPTY
            if score > best_score:
                best_score = score
                move = (r,c)
            return move
    def play(self):
        while True:
            self.print_board()
            if self.current_player == PLAYER_X:
                try:
                    row, col = map(int, input("Enter your move(row and column):").split())
                    if not (0<= row <3 and 0<= col <3):
                        print("Invalid input. Please enter row and column as 0, 1, or 2.")
                        continue
                    if not self.make_move(row, col, PLAYER_X):
                        print("Invalid move.Try again.")
                except ValueError:
                    print("Invalid move. Please enter two numbers separated by a space.")
                    continue
            else:
                print("AI is making a move...")
                row,col = self.best_move()
                self.make_move(row, col, PLAYER_O)
            if self.is_winner(self.current_player):
                self.print_board()
                print(f"Player {self.current_player} wins!")
                break
            if self.is_full():
                self.print_board()
                print("It's a draw!")
                break
            
            self.current_player = PLAYER_O if self.current_player == PLAYER_X else PLAYER_X

if __name__=="__main__":
    game= TicTacToe()
    game.play()                     
